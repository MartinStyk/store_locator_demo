import com.google.gson.GsonBuilder
import io.jsonwebtoken.Jwts

import java.security.KeyFactory
import java.security.PublicKey
import java.security.spec.X509EncodedKeySpec

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 30

    defaultConfig {
        applicationId "com.example.storelocator"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.FlowPreview"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-sdk-kt.pro'
        }
    }

    packagingOptions {
        exclude "DebugProbesKt.bin"
    }

    preBuild.dependsOn('downloadCertificatePins')
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0-alpha03"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.google.code.gson:gson:2.8.7"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"
    implementation "com.squareup.picasso:picasso:2.8"

    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutinesVersion}"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:${coroutinesVersion}"

    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation "com.google.android.gms:play-services-location:18.0.0"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task downloadCertificatePins() { task ->
    def CERTIFICATE_PINS_URL = "https://static.paysafecard.com/certs/android.txt"
    def CERTIFICATE_PINS_FILE = "pins.json"
    def CERTIFICATE_VERIFICATION_KEY = "key/public_key.pem"

    def tmpFile = new File(getRootDir(), 'pins.txt')
    new URL(CERTIFICATE_PINS_URL).withInputStream { i -> tmpFile.withOutputStream { it << i } }
    def jwt = tmpFile.text
    tmpFile.delete()

    def publicKeyString = new File(getRootDir(), CERTIFICATE_VERIFICATION_KEY).text
            .replace("-----BEGIN PUBLIC KEY-----", "")
            .replaceAll(System.lineSeparator(), "")
            .replace("-----END PUBLIC KEY-----", "")

    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(Base64.getDecoder().decode(publicKeyString))
    PublicKey publicKey = KeyFactory.getInstance("RSA").generatePublic(keySpec)

    def pins = Jwts.parserBuilder()
            .setSigningKey(publicKey)
            .build()
            .parseClaimsJws(jwt)
            .getBody()
            .get("pins", List<String>)

    def pinsJson = new GsonBuilder().create().toJson(pins)
    def assetsFile = new File(getProjectDir(), "src/main/assets/")
    assetsFile.mkdirs()
    new File(assetsFile, CERTIFICATE_PINS_FILE).text = pinsJson
}